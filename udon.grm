


%%
(* Declarations for ML-Yacc *)

%name Udon
%pos unit
%eop SEMICOLON
%start EXP

(* Terminal symbols *)
%term IDENT of string (* value identifier *)
    | BOOL of bool
    | DIGIT of int
    | ELSE (* else *)
    | END (* end *)
    | FN (* fn *)
    | IF (* if *)
    | IN (* in *)
    | INFIX (* infix *)
    | INFIXR (* infixr *)
    | LET (* let *)
    | NONFIX (* nonfix *)
    | OP (* op *)
    | REC (* rec *)
    | THEN (* then *)
    | VAL (* val *)
    | EQUAL (* = *)
    | COMMA (* , *)
    | LPAREN (* ( *)
    | RPAREN (* ) *)
    | FATARROW (* => *)
    | SEMICOLON (* ; *)

(* Nonterminal symbols *)
%nonterm VID of string
       | SCON of Const.t
       | ATEXP of ConcreteSyntax.exp
       | ATEXPSEQ_AUX of ConcreteSyntax.exp list
       | ATEXPSEQ of ConcreteSyntax.exp list
       | VIDSEQ_AUX of string list
       | VIDSEQ of string list
       | APPEXP of ConcreteSyntax.exp
       | SEQEXP of ConcreteSyntax.exp list
       | EXP of ConcreteSyntax.exp
       | ATDEC of ConcreteSyntax.dec
       | DEC of ConcreteSyntax.dec list
       | DIGIT_OPT of int option
       | NVID of string list

%%

(* Production rules *)
VID : IDENT
          (IDENT)
    | EQUAL
          ("=")

SCON : BOOL
          (Const.BOOL BOOL)
     | DIGIT
          (Const.INT DIGIT)

ATEXP : SCON
          (ConcreteSyntax.CONST SCON)
      | VID
          (ConcreteSyntax.VAR VID)
      | OP VID
          (ConcreteSyntax.OP VID)
      | LET DEC IN EXP END
          (ConcreteSyntax.LET (DEC, EXP))
      | LPAREN EXP RPAREN
          (ConcreteSyntax.PAREN EXP)

ATEXPSEQ_AUX : ATEXP COMMA ATEXP
                 ([ATEXP1, ATEXP2])
             | ATEXP COMMA ATEXPSEQ_AUX
                 (ATEXP :: ATEXPSEQ_AUX)

ATEXPSEQ : LPAREN RPAREN
             ([])
         | LPAREN ATEXPSEQ_AUX RPAREN
             (ATEXPSEQ_AUX)

VIDSEQ_AUX : VID
               ([VID])
           | VID COMMA VIDSEQ_AUX
               (VID :: VIDSEQ_AUX)

VIDSEQ : LPAREN RPAREN
           ([])
       | VID
           ([VID])
       | LPAREN VIDSEQ_AUX RPAREN
           (VIDSEQ_AUX)

APPEXP : ATEXP
           (ATEXP)
       | APPEXP ATEXPSEQ
           (ConcreteSyntax.APP (APPEXP, ATEXPSEQ))

SEQEXP : APPEXP
	   ([APPEXP])
       | APPEXP SEQEXP
           (APPEXP :: SEQEXP)

EXP : SEQEXP
        (ConcreteSyntax.SEQ SEQEXP)
    | FN VIDSEQ FATARROW EXP
        (ConcreteSyntax.ABS (VIDSEQ, EXP))
    | IF EXP THEN EXP ELSE EXP
        (ConcreteSyntax.IF (EXP1, EXP2, EXP3))

ATDEC : VAL VID EQUAL EXP
          (ConcreteSyntax.VAL (VID, EXP))
      | VAL REC VID EQUAL FN VIDSEQ FATARROW EXP
          (ConcreteSyntax.VALREC (VID, VIDSEQ, EXP))
      | INFIX DIGIT_OPT NVID
          (ConcreteSyntax.INFIXL (getOpt (DIGIT_OPT, 0), NVID))
      | INFIXR DIGIT_OPT NVID
          (ConcreteSyntax.INFIXR (getOpt (DIGIT_OPT, 0), NVID))
      | NONFIX NVID
          (ConcreteSyntax.NONFIX NVID)

DEC : ATDEC
        ([ATDEC])
    | ATDEC SEMICOLON DEC
        (ATDEC :: DEC)

DIGIT_OPT :
              (NONE)
          | DIGIT
              (SOME DIGIT)

NVID : VID
         ([VID])
     | VID NVID
         (VID :: NVID)
